// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package propertyportal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PropertyPortalClient is the client API for PropertyPortal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyPortalClient interface {
	FindProperties(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Properties, error)
	GetPropertyDetails(ctx context.Context, in *Property, opts ...grpc.CallOption) (*PropertyDetails, error)
	GetPropertyImages(ctx context.Context, opts ...grpc.CallOption) (PropertyPortal_GetPropertyImagesClient, error)
}

type propertyPortalClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyPortalClient(cc grpc.ClientConnInterface) PropertyPortalClient {
	return &propertyPortalClient{cc}
}

func (c *propertyPortalClient) FindProperties(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Properties, error) {
	out := new(Properties)
	err := c.cc.Invoke(ctx, "/propertyportal.PropertyPortal/FindProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyPortalClient) GetPropertyDetails(ctx context.Context, in *Property, opts ...grpc.CallOption) (*PropertyDetails, error) {
	out := new(PropertyDetails)
	err := c.cc.Invoke(ctx, "/propertyportal.PropertyPortal/GetPropertyDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyPortalClient) GetPropertyImages(ctx context.Context, opts ...grpc.CallOption) (PropertyPortal_GetPropertyImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropertyPortal_ServiceDesc.Streams[0], "/propertyportal.PropertyPortal/GetPropertyImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &propertyPortalGetPropertyImagesClient{stream}
	return x, nil
}

type PropertyPortal_GetPropertyImagesClient interface {
	Send(*Property) error
	Recv() (*Image, error)
	grpc.ClientStream
}

type propertyPortalGetPropertyImagesClient struct {
	grpc.ClientStream
}

func (x *propertyPortalGetPropertyImagesClient) Send(m *Property) error {
	return x.ClientStream.SendMsg(m)
}

func (x *propertyPortalGetPropertyImagesClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PropertyPortalServer is the server API for PropertyPortal service.
// All implementations must embed UnimplementedPropertyPortalServer
// for forward compatibility
type PropertyPortalServer interface {
	FindProperties(context.Context, *Filters) (*Properties, error)
	GetPropertyDetails(context.Context, *Property) (*PropertyDetails, error)
	GetPropertyImages(PropertyPortal_GetPropertyImagesServer) error
	mustEmbedUnimplementedPropertyPortalServer()
}

// UnimplementedPropertyPortalServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyPortalServer struct {
}

func (UnimplementedPropertyPortalServer) FindProperties(context.Context, *Filters) (*Properties, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProperties not implemented")
}
func (UnimplementedPropertyPortalServer) GetPropertyDetails(context.Context, *Property) (*PropertyDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyDetails not implemented")
}
func (UnimplementedPropertyPortalServer) GetPropertyImages(PropertyPortal_GetPropertyImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPropertyImages not implemented")
}
func (UnimplementedPropertyPortalServer) mustEmbedUnimplementedPropertyPortalServer() {}

// UnsafePropertyPortalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyPortalServer will
// result in compilation errors.
type UnsafePropertyPortalServer interface {
	mustEmbedUnimplementedPropertyPortalServer()
}

func RegisterPropertyPortalServer(s grpc.ServiceRegistrar, srv PropertyPortalServer) {
	s.RegisterService(&PropertyPortal_ServiceDesc, srv)
}

func _PropertyPortal_FindProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyPortalServer).FindProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/propertyportal.PropertyPortal/FindProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyPortalServer).FindProperties(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyPortal_GetPropertyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Property)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyPortalServer).GetPropertyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/propertyportal.PropertyPortal/GetPropertyDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyPortalServer).GetPropertyDetails(ctx, req.(*Property))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyPortal_GetPropertyImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PropertyPortalServer).GetPropertyImages(&propertyPortalGetPropertyImagesServer{stream})
}

type PropertyPortal_GetPropertyImagesServer interface {
	Send(*Image) error
	Recv() (*Property, error)
	grpc.ServerStream
}

type propertyPortalGetPropertyImagesServer struct {
	grpc.ServerStream
}

func (x *propertyPortalGetPropertyImagesServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func (x *propertyPortalGetPropertyImagesServer) Recv() (*Property, error) {
	m := new(Property)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PropertyPortal_ServiceDesc is the grpc.ServiceDesc for PropertyPortal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyPortal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "propertyportal.PropertyPortal",
	HandlerType: (*PropertyPortalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindProperties",
			Handler:    _PropertyPortal_FindProperties_Handler,
		},
		{
			MethodName: "GetPropertyDetails",
			Handler:    _PropertyPortal_GetPropertyDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPropertyImages",
			Handler:       _PropertyPortal_GetPropertyImages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "property_portal.proto",
}
